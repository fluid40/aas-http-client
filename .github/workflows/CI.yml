name: CI

on:
  push:
    branches:
      - '**'

permissions:
  contents: write

jobs:
  Detect_Project_Changes:
    name: Check for new version
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if pyproject.toml changed
        id: check
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^pyproject\.toml$'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  Test_client:
    name: Test HTTP client
    runs-on: ubuntu-latest

    services:
      java_aas_server:
        image: eclipsebasyx/aas-environment:2.0.0-SNAPSHOT
        ports:
          - 8075:8075
        env:
          SERVER_PORT: 8075
          SERVER_HOST: javaaasserver

      dotnet_aas_server:
        image: engineeringmethodsag/fluid-basyx-dotnet-repo-server:latest
        ports:
          - 5043:5043

      python_aas_server:
        image:  engineeringmethodsag/fluid-basyx-python-aasx-server:latest
        ports:
          - "5080:80"
        env:
          API_BASE_PATH: /
          STORAGE_TYPE: LOCAL_FILE_BACKEND
          STORAGE_PATH: /storage
        volumes:
          - ./storage/pythonaasserver:/storage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Wait for Java server to be healthy
        run: |
          echo "Waiting for server..."
          for i in {1..10}; do
            if curl -sSf http://localhost:8075/shells > /dev/null; then
              echo "Server is ready!"
              break
            fi
            sleep 2
          done

      - name: Wait for dotNet server to be healthy
        run: |
          echo "Waiting for server..."
          for i in {1..10}; do
            if curl -sSf http://localhost:5043/shells > /dev/null; then
              echo "Server is ready!"
              break
            fi
            sleep 2
          done

      - name: Wait for dotNet server to be healthy
        run: |
          echo "Waiting for server..."
          for i in {1..10}; do
            if curl -sSf http://localhost:80/shells > /dev/null; then
              echo "Server is ready!"
              break
            fi
            sleep 2
          done

      - name: Run tests
        run: pytest -v tests/test_client.py

  Test_SDK_Wrapper:
    name: Test SDK Wrapper
    runs-on: ubuntu-latest

    services:
      java_aas_server:
        image: eclipsebasyx/aas-environment:2.0.0-SNAPSHOT
        ports:
          - 8075:8075
        env:
          SERVER_PORT: 8075
          SERVER_HOST: javaaasserver

      dotnet_aas_server:
        image: engineeringmethodsag/fluid-basyx-dotnet-repo-server:latest
        ports:
          - 5043:5043

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Wait for Java server to be healthy
        run: |
          echo "Waiting for server..."
          for i in {1..10}; do
            if curl -sSf http://localhost:8075/shells > /dev/null; then
              echo "Server is ready!"
              break
            fi
            sleep 2
          done

      - name: Wait for dotNet server to be healthy
        run: |
          echo "Waiting for server..."
          for i in {1..10}; do
            if curl -sSf http://localhost:5043/shells > /dev/null; then
              echo "Server is ready!"
              break
            fi
            sleep 2
          done

      - name: Run tests
        env:
          SERVER_URL: http://localhost:8075
        run: pytest -v tests/test_wrapper.py

  Publish_PyPI_Package:
    name: Publish PyPI Package
    if: github.ref == 'refs/heads/main' && needs.Detect_Project_Changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    needs: [Test_client, Test_SDK_Wrapper, Detect_Project_Changes]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Upload package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pypi-dist
          path: dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

  Github_Release:
    name: Create GitHub Release
    if: github.ref == 'refs/heads/main' && needs.Detect_Project_Changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    needs: Publish_PyPI_Package

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: pypi-dist
          path: dist

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag if it doesn't exist
        run: |
          VERSION_TAG="v${{ steps.get_version.outputs.version }}"
          if git rev-parse "$VERSION_TAG" >/dev/null 2>&1; then
            echo "Tag $VERSION_TAG already exists."
          else
            echo "Creating tag $VERSION_TAG"
            git tag "$VERSION_TAG"
            git push origin "$VERSION_TAG"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: ðŸš€ Release v${{ steps.get_version.outputs.version }}
          generate_release_notes: true
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

