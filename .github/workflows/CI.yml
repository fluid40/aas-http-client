name: Test and Publish to PyPI

on:
  push:
    branches:
      - '**'

jobs:
  Unit_Tests_Java_Server:
    name: Unit Tests for Java Server
    runs-on: ubuntu-latest

    services:
      java_aas_server:
        image: eclipsebasyx/aas-environment:2.0.0-SNAPSHOT
        ports:
          - 8075:8075 # host_port:container_port
        env:
          SERVER_PORT: 8075
          SERVER_HOST: javaaasserver       
        options: >-
          --health-cmd="curl --fail http://localhost:8075/shells || exit 1"
          --health-interval=5s
          --health-timeout=2s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Wait for server to be healthy
        run: |
          echo "Waiting for server..."
          for i in {1..10}; do
            if curl -sSf http://localhost:8075/shells > /dev/null; then
              echo "Server is ready!"
              break
            fi
            sleep 2
          done

      - name: Run tests
        env:
          SERVER_URL: http://localhost:8075
        run: pytest -v tests/test_client_java_server.py

  Unit_Tests_dotNet_Server:
    name: Unit Tests for dotNet Server
    runs-on: ubuntu-latest

    services:
      dotnet_aas_server:
        image: engineeringmethodsag/fluid-basyx-dotnet-repo-server:latest
        ports:
          - 5043:5043 # host_port:container_port  
        options: >-
          --health-cmd="curl --fail http://localhost:5043/ || exit 1"
          --health-interval=5s
          --health-timeout=2s
          --health-retries=4

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Wait for server to be healthy
        run: |
          echo "Waiting for server..."
          for i in {1..10}; do
            if curl -sSf http://localhost:5043/ > /dev/null; then
              echo "Server is ready!"
              break
            fi
            sleep 2
          done

      - name: Run tests
        env:
          SERVER_URL: http://localhost:5043
        run: pytest -v tests/test_client_dotnet_server.py

  Publish_PyPI_Package:
    name: Publish PyPI Package
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [Unit_Tests_Java_Server, Unit_Tests_dotNet_Server]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

  Github_Release:
    name: Create GitHub Release
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: Publish_PyPI_Package

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: ðŸš€ Release v${{ steps.get_version.outputs.version }}
          body: |
            - Contains PyPI package
            - Version: v${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}